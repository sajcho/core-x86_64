# Description:	LLVM toolchain - llvm,clang,clang-tools-extra,compiler-rt,lld
# URL:		http://llvm.org/
# Maintainer:	sajcho, saux dot aarch64 at gmail dot com
# Depends on:	cmake libxml2 samurai

name=llvm-toolchain
version=12.0.1
release=0
source=(https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}/llvm-project-${version}.src.tar.xz)

build() {
	cd llvm-project-${version}.src

	mkdir build
	cd build

	export CC="gcc"
	export CXX="g++"

	cmake .. -G Ninja \
		-DCMAKE_BUILD_TYPE="Release" \
		-DCMAKE_INSTALL_PREFIX="/usr " \
		-DLLVM_TARGETS_TO_BUILD="host;X86;AMDGPU;BPF;NVPTX" \
		-DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;lld" \
		-DLLVM_BUILD_LLVM_DYLIB=ON \
		-DLLVM_LINK_LLVM_DYLIB=ON \
		-DLLVM_INSTALL_UTILS=ON \
		-DLLVM_ENABLE_FFI=ON \
		-DLLVM_ENABLE_ZLIB=ON \
		-DLLVM_ENABLE_PIC=ON \
		-DLLVM_ENABLE_RTTI=ON \
		-DLLVM_ENABLE_LLD=OFF \
		-DLLVM_INCLUDE_EXAMPLES=OFF \
		-DLLVM_INCLUDE_TESTS=ON \
		-DLLVM_ENABLE_OCAMLDOC=OFF \
		-DLLVM_PARALLEL_COMPILE_JOBS="${JOBS:-1}" \
		-DCLANG_VENDOR="SAUX x86_64" \
		-DLLD_VENDOR="SAUX x86_64" \
		-Wno-dev \
		../llvm

	ninja

	DESTDIR=$PKG ninja install

	mv $PKG/usr/libexec/{c++-analyzer,ccc-analyzer} $PKG/usr/lib/clang

	rmdir $PKG/usr/libexec

	sed -i 's|libexec|lib/clang|' $PKG/usr/bin/scan-build
}
